import org.gradle.api.internal.file.collections.SimpleFileCollection


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'war'


def tomcatRoot = System.getenv('CATALINA_HOME')
def dbUser = 'postgres'
def dbPassword = 'root'
def dbName = 'alladin_db'
def url = "jdbc:postgresql://localhost:5432/${dbName}";

task wrapper(type: Wrapper) { gradleVersion = '1.1' }


def version = '1.0'
sourceSets {
    main.java.srcDir "src" ////
// main.output.classesDir='out/bin'
// // main.output.resourcesDir = 'out/res'
}
repositories {
    mavenCentral()
}

dependencies {

    compile 'commons-logging:commons-logging:1.2'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'junit:junit:4.12'
    compile 'org.springframework:spring-aop:4.2.5.RELEASE'
    compile 'org.springframework:spring-beans:4.2.5.RELEASE'
    compile 'org.springframework:spring-context:4.2.5.RELEASE'
    compile 'org.springframework:spring-core:4.2.5.RELEASE'
    compile 'org.springframework:spring-expression:4.2.5.RELEASE'
    compile 'org.springframework:spring-test:4.2.5.RELEASE'

}

task createDirs << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    webAppDir.mkdirs()
}

task getLibs(type: Copy) {
    from configurations.compile
    into "${project.projectDir}/lib"
}

task deploy(dependsOn: 'undeploy', type: Copy) {
    from('build/libs') {
        include '*.war'
    }
    into "${tomcatRoot}/webapps"
}

task undeploy() << {
    delete "${tomcatRoot}/webapps/$project.name"
    delete "${tomcatRoot}/webapps/$project.name" + ".war"
}

task startTom(dependsOn: 'stopTom') << {
    ant.exec(osfamily: 'windows', dir: "${tomcatRoot}/bin", executable: 'cmd.exe', spawn: true) {
        env(key: 'NOPAUSE', value: true)
        arg(line: '/c startup.bat')
    }
}

task stopTom() << {
    ant.exec(osfamily: 'windows', dir: "${tomcatRoot}/bin", executable: 'cmd.exe', spawn: true) {
        env(key: 'NOPAUSE', value: true)
        arg(line: '/c shutdown.bat')
    }
}


task initProject << {
    File oldSource = file("./src")
    File tmpSource = file("./tmp")
    tmpSource.mkdirs()

    oldSource.listFiles().each { File f -> f.renameTo new File(tmpSource, f.name) }

    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    webAppDir.mkdirs()

    File newSource = file(sourceSets.main.java.srcDirs.iterator().next())

    tmpSource.listFiles().each { File f -> f.renameTo new File(newSource, f.name) }

    tmpSource.delete()
}
