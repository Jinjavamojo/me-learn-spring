import org.gradle.api.internal.file.collections.SimpleFileCollection


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'war'


def tomcatRoot = System.getenv('CATALINA_HOME')
def dbUser = 'postgres'
def dbPassword = 'root'
def dbName = 'alladin_db'
def url = "jdbc:postgresql://localhost:5432/${dbName}";

task wrapper(type: Wrapper) { gradleVersion = '1.1' }

def spring_version = '3.1.1.RELEASE'

def version = '1.0'
sourceSets {
    main.java.srcDir "src" ////
// main.output.classesDir='out/bin'
// // main.output.resourcesDir = 'out/res'
}
repositories {
    mavenCentral()
}

dependencies {

	compile 'commons-logging:commons-logging:1.2'
	compile 'org.hamcrest:hamcrest-core:1.3'
	compile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'junit:junit:4.12'
compile	'org.springframework:spring-aop:4.2.5.RELEASE'
compile 'org.springframework:spring-beans:4.2.5.RELEASE'
compile 'org.springframework:spring-context:4.2.5.RELEASE'
compile 'org.springframework:spring-core:4.2.5.RELEASE'
compile 'org.springframework:spring-expression:4.2.5.RELEASE'
testCompile 'org.springframework:spring-test:4.2.5.RELEASE'

}

task createDirs << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    webAppDir.mkdirs()
}

task getLibs(type: Copy) {
    from configurations.compile
    into "${project.projectDir}/lib"
}

task deploy(dependsOn: 'undeploy', type: Copy) {
    from ('build/libs') {
        include '*.war'
    }
    into "${tomcatRoot}/webapps"
}

task undeploy() << {
    delete "${tomcatRoot}/webapps/$project.name"
    delete "${tomcatRoot}/webapps/$project.name" + ".war"
}

task startTom(dependsOn: 'stopTom') << {
    ant.exec(osfamily: 'windows', dir: "${tomcatRoot}/bin", executable: 'cmd.exe', spawn: true) {
        env(key: 'NOPAUSE', value: true)
        arg(line: '/c startup.bat')
    }
}

task stopTom() << {
    ant.exec(osfamily: 'windows', dir: "${tomcatRoot}/bin", executable: 'cmd.exe', spawn: true) {
        env(key: 'NOPAUSE', value: true)
        arg(line: '/c shutdown.bat')
    }
}


task initProject << {
    File oldSource = file("./src")
    File tmpSource = file("./tmp")
    tmpSource.mkdirs()

    oldSource.listFiles().each { File f -> f.renameTo new File(tmpSource, f.name) }

    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    webAppDir.mkdirs()

    File newSource = file(sourceSets.main.java.srcDirs.iterator().next())

    tmpSource.listFiles().each { File f -> f.renameTo new File(newSource, f.name) }

    tmpSource.delete()
}
task compileGwtMy(type: GwtCompile);

task compileGwt1(type: JavaExec) {
    ext.buildDir = "${project.buildDir}/gwt"
    ext.extraDir = "${project.buildDir}/extra"

    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir buildDir

    // Workaround for incremental build (GRADLE-1483)
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()

    doFirst {
        file(buildDir).mkdirs()
        //classpath.each { println it.name}
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDir,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
        ]
    }

    args =
            [
                    'com.magicfinance.MagicFinance', // Your GWT module
                    '-war', buildDir,
                    '-logLevel', 'INFO',
                    '-localWorkers', '2',
                    '-compileReport',
                    '-extra', extraDir,
                    '-draftCompile',
                    '-optimize','9'

            ]

    maxHeapSize = '256M'
}

war.dependsOn compileGwt1
war {
    from compileGwt1.buildDir
}
war.doLast {
    ant.unzip(src: war.archivePath, dest: "./war")
}

class GwtCompile extends JavaExec {

    GwtCompile() {

        def sources = new ArrayList()
        def files = new ArrayList<File>()
        sources.addAll(project.sourceSets.main.java.srcDirs)
        sources.addAll(project.sourceSets.main.output.resourcesDir)
        sources.addAll(project.sourceSets.main.output.classesDir)
        sources.addAll(project.sourceSets.main.compileClasspath)
//
        project.sourceSets.main.java.srcDirs.each { File dir ->
            files.add(dir)
        }
        sources.each { File sourceDir ->
            if (sourceDir.exists()) {
                project.fileTree(sourceDir, { exclude '**/.*' }).each { File sourceFile ->
                    files.add(sourceFile)
                }
            }
        }

        inputs.source("E:\\java_projects\\MagicFinance\\src")
        inputs.dir("E:\\java_projects\\MagicFinance\\build\\resources\\main")
        outputs.dir(project.buildDir.absolutePath)

        File extraDir = new File("${project.buildDir}/extra".toString())
        File buildDir = new File("${project.buildDir}/gwt".toString())
        extraDir.mkdir()
        buildDir.mkdir()
        FileCollection simFC = new SimpleFileCollection(files);

        List<String> args = ["com.magicfinance.MagicFinance",
                             "-war", buildDir.absolutePath,
                             "-logLevel", "INFO",
                             "-localWorkers", "2",
                             "-compileReport",
                             "-extra", extraDir.absolutePath,
                             "-draftCompile"
        ];

        dependsOn('classes')
        setMain("com.google.gwt.dev.Compiler");
        setClasspath(simFC)
        setMaxHeapSize("512M")
        setArgs(args)
    }
}